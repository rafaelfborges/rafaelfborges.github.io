{"version":3,"sources":["webpack:///./src/components/PostItem/styles.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Pagination/styles.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/blog-list.js"],"names":["PostItemLink","styled","Link","PostItemWrapper","section","PostItemTag","div","props","background","PostItemInfo","PostItemDate","time","PostItemTitle","h1","PostItemDescription","p","PostItem","slug","category","date","timeToRead","title","description","to","PaginationWrapper","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","query","BlogList","postList","data","allMarkdownRemark","edges","pageContext","Layout","map","node","frontmatter","fields"],"mappings":"8IAGaA,EAAeC,YAAOC,QAAV,0EAAGD,CAAH,6EAUZE,EAAkBF,IAAOG,QAAV,6EAAGH,CAAH,mGAQfI,EAAcJ,IAAOK,IAAV,yEAAGL,CAAH,kMAER,SAAAM,GAAK,OAAKA,EAAMC,WAAaD,EAAMC,WAAa,aAYnDC,EAAeR,IAAOK,IAAV,0EAAGL,CAAH,4DAMZS,EAAeT,IAAOU,KAAV,0EAAGV,CAAH,uBAIZW,EAAgBX,IAAOY,GAAV,2EAAGZ,CAAH,8DAMba,EAAsBb,IAAOc,EAAV,iFAAGd,CAAH,uDCbjBe,IAjCE,SAAC,GAAD,IACfC,EADe,EACfA,KACAT,EAFe,EAEfA,WACAU,EAHe,EAGfA,SACAC,EAJe,EAIfA,KACAC,EALe,EAKfA,WACAC,EANe,EAMfA,MACAC,EAPe,EAOfA,YAPe,OASf,kBAAC,EAAD,CAAgBC,GAAIN,GAClB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAeT,WAAYA,GAAaU,GACxC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGC,EADH,MACYC,EADZ,mBAGA,kBAAC,EAAD,KAAkBC,GAClB,kBAAC,EAAD,KAAwBC,Q,kHCpBnBE,E,UAAoBvB,EAAOG,QAAV,4EAAGH,CAAH,sNC8BfwB,EA1BI,SAAC,GAAD,IACjBC,EADiB,EACjBA,QACAC,EAFiB,EAEjBA,OACAC,EAHiB,EAGjBA,YACAC,EAJiB,EAIjBA,SACAC,EALiB,EAKjBA,SACAC,EANiB,EAMjBA,SANiB,OAQjB,kBAAC,EAAD,MACIL,GAAW,kBAAC,OAAD,CAAMH,GAAIO,GAAV,mBACb,2BACGF,EADH,OACoBC,IAElBF,GAAU,kBAAC,OAAD,CAAMJ,GAAIQ,GAAV,oBCnBhB,sCAQA,IA2CaC,EAAK,aA0BHC,UArEE,SAAA1B,GACf,IAAM2B,EAAW3B,EAAM4B,KAAKC,kBAAkBC,MADtB,EAEU9B,EAAM+B,YAAhCV,EAFgB,EAEhBA,YAAaC,EAFG,EAEHA,SACfH,EAA0B,IAAhBE,EACVD,EAASC,IAAgBC,EACzBC,EAAWF,EAAc,GAAM,EAAI,IAAxB,UAAuCA,EAAc,GAChEG,EAAQ,UAAYH,EAAc,GAExC,OACE,kBAACW,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKlB,MAAM,SACVa,EAASM,KACR,oBACEC,KADF,IAEIC,YAAelC,EAFnB,EAEmBA,WAAYU,EAF/B,EAE+BA,SAAUC,EAFzC,EAEyCA,KAAMG,EAF/C,EAE+CA,YAAaD,EAF5D,EAE4DA,MACxDD,EAHJ,EAGIA,WACUH,EAJd,EAII0B,OAAU1B,KAJd,OAOE,kBAACD,EAAA,EAAD,CACEC,KAAMA,EACNT,WAAYA,EACZU,SAAUA,EACVC,KAAMA,EACNC,WAAYA,EACZC,MAAOA,EACPC,YAAaA,OAKnB,kBAAC,EAAD,CACEI,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,SAAUA","file":"component---src-templates-blog-list-js-8a21001a4f1ee7f0543f.js","sourcesContent":["import styled from \"styled-components\"\nimport { Link } from \"gatsby\"\n\nexport const PostItemLink = styled(Link)`\n  color: #8899a6;\n  display: flex;\n  text-decoration: none;\n\n  &:hover {\n    color: #1fa1f2;\n  }\n`\n\nexport const PostItemWrapper = styled.section`\n  align-items: center;\n  border-bottom: 1px solid #38444d;\n  display: flex;\n  padding: 2rem 3rem;\n  width: 100%;\n`\n\nexport const PostItemTag = styled.div`\n  align-items: center;\n  background: ${props => (props.background ? props.background : \"#1fa1f2\")};\n  border-radius: 50%;\n  color: #fff;\n  display: flex;\n  font-size: 1.3rem;\n  font-weight: 700;\n  justify-content: center;\n  min-height: 90px;\n  min-width: 90px;\n  text-transform: uppercase;\n`\n\nexport const PostItemInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 1.5rem;\n`\n\nexport const PostItemDate = styled.time`\n  font-size: 0.9rem;\n`\n\nexport const PostItemTitle = styled.h1`\n  font-size: 1.6rem;\n  font-weight: 700;\n  margin: 0.2rem 0 0.5rem;\n`\n\nexport const PostItemDescription = styled.p`\n  font-size: 1.2rem;\n  font-weight: 300;\n  line-height: 1.2;\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport * as S from \"./styles\"\n\nconst PostItem = ({\n  slug,\n  background,\n  category,\n  date,\n  timeToRead,\n  title,\n  description,\n}) => (\n  <S.PostItemLink to={slug}>\n    <S.PostItemWrapper>\n      <S.PostItemTag background={background}>{category}</S.PostItemTag>\n      <S.PostItemInfo>\n        <S.PostItemDate>\n          {date} - {timeToRead} min de leitura\n        </S.PostItemDate>\n        <S.PostItemTitle>{title}</S.PostItemTitle>\n        <S.PostItemDescription>{description}</S.PostItemDescription>\n      </S.PostItemInfo>\n    </S.PostItemWrapper>\n  </S.PostItemLink>\n)\n\nPostItem.propTypes = {\n  slug: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  category: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n}\n\nexport default PostItem\n","import styled from \"styled-components\"\n\nexport const PaginationWrapper = styled.section`\n  align-items: center;\n  border-top: 1px solid #38444d;\n  color: #8899a6;\n  display: flex;\n  padding: 1.5rem 3rem;\n  justify-content: space-between;\n\n  a {\n    color: #8899a6;\n    text-decoration: none;\n    transition: color 0.5s;\n    &:hover {\n      color: #1fa1f2;\n    }\n  }\n`\n","import React from \"react\"\nimport propTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\n\nimport * as S from \"./styles\"\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  currentPage,\n  numPages,\n  prevPage,\n  nextPage,\n}) => (\n  <S.PaginationWrapper>\n    {!isFirst && <Link to={prevPage}>Página anterior</Link>}\n    <p>\n      {currentPage} de {numPages}\n    </p>\n    {!isLast && <Link to={nextPage}>Próxima página</Link>}\n  </S.PaginationWrapper>\n)\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  currentPage: propTypes.number.isRequired,\n  numPages: propTypes.number.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n}\n\nexport default Pagination\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\nimport PostItem from \"../components/PostItem\"\nimport Pagination from \"../components/Pagination\"\n\nconst BlogList = props => {\n  const postList = props.data.allMarkdownRemark.edges\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? \"/\" : `/page/${currentPage - 1}`\n  const nextPage = `/page/${currentPage + 1}`\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      {postList.map(\n        ({\n          node: {\n            frontmatter: { background, category, date, description, title },\n            timeToRead,\n            fields: { slug },\n          },\n        }) => (\n          <PostItem\n            slug={slug}\n            background={background}\n            category={category}\n            date={date}\n            timeToRead={timeToRead}\n            title={title}\n            description={description}\n          />\n        )\n      )}\n\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        currentPage={currentPage}\n        numPages={numPages}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PostList($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            background\n            category\n            date(locale: \"pt-br\", formatString: \"DD [de] MMMM [de] YYYY\")\n            description\n            title\n          }\n          timeToRead\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default BlogList\n"],"sourceRoot":""}